"use client";
import React, { useState, useEffect } from "react";
import axios from "axios";
import { decryptData } from "@/lib/encryption";
import { ToastContainer, toast } from "react-toastify";
import { apiUrl, API_CONFIG } from "@/configs/api";
import { FaPlus, FaEdit, FaTrash } from "react-icons/fa";
import "react-toastify/dist/ReactToastify.css";
import Loading from "@/components/Loading";
import { useAppContext } from "@/context/AppContext";
import AddressFormModal from "@/components/dashboard/AddressFormModal";

const ShippingPage = () => {
  const { userData } = useAppContext();
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [pageLoading, setPageLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);

  useEffect(() => {
    if (userData) {
      fetchAddresses();
    }
  }, [userData]);

  const fetchAddresses = async () => {
    setPageLoading(true);
    try {
      const response = await axios.get(
        `${apiUrl(API_CONFIG.ENDPOINTS.PROFILE.GET)}/${userData.id}`
      );
      setAddresses(response.data.shippingAddresses || []);
    } catch (error) {
      console.error("Error fetching addresses:", error);
      toast.error("Failed to fetch shipping addresses.");
    } finally {
      setPageLoading(false);
    }
  };

  const handleAddAddress = () => {
    setEditingAddress(null);
    setIsModalOpen(true);
  };

  const handleEditAddress = (address) => {
    setEditingAddress(address);
    setIsModalOpen(true);
  };

  const handleDeleteAddress = async (addressId) => {
    if (window.confirm("Are you sure you want to delete this address?")) {
      setLoading(true);
      try {
        await axios.delete(
          `${apiUrl(API_CONFIG.ENDPOINTS.PROFILE.SHIPPING)}/${
            userData.id
          }/${addressId}`
        );
        toast.success("Address deleted successfully!");
        fetchAddresses(); // Refresh the list
      } catch (error) {
        console.error("Error deleting address:", error);
        toast.error(
          error.response?.data?.message || "Failed to delete address."
        );
      } finally {
        setLoading(false);
      }
    }
  };

  const handleSaveAddress = async (addressData) => {
    setLoading(true);
    try {
      if (editingAddress) {
        // Update existing address
        await axios.put(
          `${apiUrl(API_CONFIG.ENDPOINTS.PROFILE.SHIPPING)}/${userData.id}/${
            editingAddress._id
          }`,
          addressData
        );
        toast.success("Address updated successfully!");
      } else {
        // Add new address
        await axios.post(
          `${apiUrl(API_CONFIG.ENDPOINTS.PROFILE.SHIPPING)}/${userData.id}`,
          addressData
        );
        toast.success("Address added successfully!");
      }
      setIsModalOpen(false);
      fetchAddresses(); // Refresh the list
    } catch (error) {
      console.error("Error saving address:", error);
      toast.error(error.response?.data?.message || "Failed to save address.");
    } finally {
      setLoading(false);
    }
  };

  if (pageLoading) {
    return <Loading />;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <ToastContainer />
      <div className="bg-white rounded-xl shadow-lg p-6 md:p-8">
        <div className="flex justify-between items-start mb-8 border-b pb-6">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-gray-800">
              Shipping Addresses
            </h1>
            <p className="text-gray-500 mt-1">
              Manage your shipping addresses for faster checkout.
            </p>
          </div>
          <button
            onClick={handleAddAddress}
            className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-300"
          >
            <FaPlus />
            Add Address
          </button>
        </div>

        {loading && !pageLoading && <p>Saving...</p>}

        <div className="space-y-4">
          {addresses.length > 0 ? (
            addresses.map((address) => (
              <div
                key={address._id}
                className="p-4 border rounded-lg bg-gray-50 flex justify-between items-start"
              >
                <div>
                  <p className="font-semibold">{address.fullName}</p>
                  <p className="text-gray-600 text-sm">
                    {address.address}, {address.city}, {address.state} -{" "}
                    {address.zipcode}
                  </p>

                  <p className="text-gray-600 text-sm">
                    Phone: {address.phoneNumber}
                  </p>
                </div>
                <div className="flex items-center gap-3">
                  <button
                    onClick={() => handleEditAddress(address)}
                    className="text-blue-600 hover:text-blue-800"
                    aria-label="Edit address"
                  >
                    <FaEdit size={18} />
                  </button>
                  <button
                    onClick={() => handleDeleteAddress(address._id)}
                    className="text-red-600 hover:text-red-800"
                    aria-label="Delete address"
                  >
                    <FaTrash size={16} />
                  </button>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-10 px-6 bg-gray-50 rounded-lg">
              <p className="text-gray-500">You have no saved addresses.</p>
              <button
                onClick={handleAddAddress}
                className="mt-4 flex items-center gap-2 mx-auto px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors duration-300"
              >
                <FaPlus />
                Add Your First Address
              </button>
            </div>
          )}
        </div>
      </div>

      {isModalOpen && (
        <AddressFormModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          onSave={handleSaveAddress}
          address={editingAddress}
          loading={loading}
        />
      )}
    </div>
  );
};

export default ShippingPage;
